{"version":3,"file":"firebase-database.js","sources":["../../node_modules/tslib/tslib.es6.js","../util/src/constants.ts","../util/src/assert.ts","../util/src/crypt.ts","../util/src/deepCopy.ts","../util/src/deferred.ts","../util/src/environment.ts","../util/src/errors.ts","../util/src/json.ts","../util/src/jwt.ts","../util/src/obj.ts","../util/src/sha1.ts","../util/src/validation.ts","../util/src/utf8.ts","../logger/src/logger.ts","../database/src/core/util/util.ts","../database/src/core/storage/DOMStorageWrapper.ts","../database/src/core/storage/MemoryStorage.ts","../database/src/core/storage/storage.ts","../database/src/core/util/Path.ts","../database/src/realtime/Constants.ts","../database/src/core/RepoInfo.ts","../database/src/core/util/libs/parser.ts","../database/src/core/util/NextPushId.ts","../database/src/core/snap/indexes/KeyIndex.ts","../database/src/core/snap/snap.ts","../database/src/core/util/validation.ts","../database/src/api/onDisconnect.ts","../database/src/api/TransactionResult.ts","../database/src/core/snap/Node.ts","../database/src/core/snap/indexes/Index.ts","../database/src/core/snap/LeafNode.ts","../database/src/core/snap/indexes/PriorityIndex.ts","../database/src/core/snap/IndexMap.ts","../database/src/core/snap/ChildrenNode.ts","../database/src/core/util/SortedMap.ts","../database/src/core/snap/childSet.ts","../database/src/core/snap/comparators.ts","../database/src/core/snap/nodeFromJSON.ts","../database/src/core/snap/indexes/ValueIndex.ts","../database/src/api/Query.ts","../database/src/core/operation/Operation.ts","../database/src/core/snap/indexes/PathIndex.ts","../database/src/api/DataSnapshot.ts","../database/src/core/view/Event.ts","../database/src/core/view/EventRegistration.ts","../database/src/core/util/CountedSet.ts","../database/src/core/SparseSnapshotTree.ts","../database/src/core/util/ServerValues.ts","../database/src/core/util/ImmutableTree.ts","../database/src/core/SyncPoint.ts","../database/src/core/operation/AckUserWrite.ts","../database/src/core/operation/ListenComplete.ts","../database/src/core/operation/Overwrite.ts","../database/src/core/operation/Merge.ts","../database/src/core/view/CacheNode.ts","../database/src/core/view/ViewCache.ts","../database/src/core/view/Change.ts","../database/src/core/view/filter/IndexedFilter.ts","../database/src/core/view/ChildChangeAccumulator.ts","../database/src/core/view/CompleteChildSource.ts","../database/src/core/view/ViewProcessor.ts","../database/src/core/view/EventGenerator.ts","../database/src/core/view/View.ts","../database/src/core/CompoundWrite.ts","../database/src/core/WriteTree.ts","../database/src/core/SyncTree.ts","../database/src/core/SnapshotHolder.ts","../database/src/core/AuthTokenProvider.ts","../database/src/core/stats/StatsCollection.ts","../database/src/core/stats/StatsManager.ts","../database/src/core/stats/StatsListener.ts","../database/src/core/stats/StatsReporter.ts","../database/src/core/view/EventQueue.ts","../database/src/core/util/EventEmitter.ts","../database/src/core/util/VisibilityMonitor.ts","../database/src/core/util/OnlineMonitor.ts","../database/src/realtime/polling/PacketReceiver.ts","../database/src/realtime/BrowserPollConnection.ts","../database/src/realtime/WebSocketConnection.ts","../database/src/realtime/TransportManager.ts","../database/src/realtime/Connection.ts","../database/src/core/ServerActions.ts","../database/src/core/PersistentConnection.ts","../database/src/core/ReadonlyRestClient.ts","../util/src/query.ts","../database/src/core/Repo.ts","../database/src/core/view/filter/RangedFilter.ts","../database/src/core/view/filter/LimitedFilter.ts","../database/src/core/view/QueryParams.ts","../database/src/api/Reference.ts","../database/src/core/util/Tree.ts","../database/src/core/Repo_transaction.ts","../database/src/core/RepoManager.ts","../database/src/api/Database.ts","../database/src/api/internal.ts","../database/src/api/test_access.ts","../database/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function(assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function(message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function(str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function(bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\n// Static lookup maps, lazily populated by init_()\nexport const base64 = {\n  /**\n   * Maps bytes to characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   * @type {string}\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   * @type {string}\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   * @type {string}\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   * @type {boolean}\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap: number[] = webSafe\n      ? this.byteToCharMapWebSafe_\n      : this.byteToCharMap_;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_\n      : this.charToByteMap_;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function(str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    (target as { [key: string]: unknown })[prop] = deepExtend(\n      (target as { [key: string]: unknown })[prop],\n      (source as { [key: string]: unknown })[prop]\n    );\n  }\n\n  return target;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void;\n  resolve: (value?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: StringLike | undefined;\n}\n\nexport interface FirebaseError extends Error, ErrorData {\n  // Unique code for error - format is service/error-code-string.\n  readonly code: string;\n\n  // Developer-friendly error message.\n  readonly message: string;\n\n  // Always 'FirebaseError'.\n  readonly name: typeof ERROR_NAME;\n\n  // Where available - stack backtrace in a string.\n  readonly stack?: string;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(readonly code: string, message: string) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage);\n\n    // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n    for (const key of Object.keys(customData)) {\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\n            `Overwriting FirebaseError base field \"${key}\" can cause unexpected behavior.`\n          );\n        }\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? value.toString() : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function(token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function(token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function(token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function(token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function(token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable */\n// will enable after https://github.com/firebase/firebase-js-sdk/pull/1811 is merged\n\ninterface UtilObject<V> {\n  [key: string]: V;\n}\n\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\nexport const contains = function<V>(obj: UtilObject<V>, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nexport const safeGet = function<V>(\n  obj: UtilObject<V>,\n  key: string\n): V | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];\n  // else return undefined.\n};\n\n/**\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\n *\n * @param {?Object.<K,V>} obj Object to enumerate.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexport const forEach = function<V>(\n  obj: UtilObject<V>,\n  fn: (key: string, value: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n};\n\n/**\n * Copies all the (own) properties from one object to another.\n * @param {!Object} objTo\n * @param {!Object} objFrom\n * @return {!Object} objTo\n */\nexport const extend = function<V>(\n  objTo: UtilObject<V>,\n  objFrom: UtilObject<V>\n): UtilObject<V> {\n  forEach(objFrom, function(key, value) {\n    objTo[key] = value;\n  });\n  return objTo;\n};\n\n/**\n * Returns a clone of the specified object.\n * @param {!Object} obj\n * @return {!Object} cloned obj.\n */\nexport const clone = function<V>(obj: UtilObject<V>) {\n  return extend({}, obj);\n};\n\n/**\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\n * for functions.\n */\nexport const isNonNullObject = function<V>(obj: UtilObject<V>): boolean {\n  return typeof obj === 'object' && obj !== null;\n};\n\nexport const isEmpty = function<V>(obj: UtilObject<V>) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nexport const getCount = function<V>(obj: UtilObject<V>): number {\n  var rv = 0;\n  for (var key in obj) {\n    rv++;\n  }\n  return rv;\n};\n\nexport const map = function<V>(\n  obj: UtilObject<V>,\n  fn: (value: V, key: string | number, obj: UtilObject<V>) => unknown,\n  context?: unknown\n) {\n  var res: UtilObject<V> = {};\n  for (var key in obj) {\n    res[key] = fn.call(context, obj[key], key, obj);\n  }\n  return res;\n};\n\nexport const findKey = function<V>(\n  obj: UtilObject<V>,\n  fn: (value: V, key: string | number, obj: UtilObject<V>) => unknown,\n  context?: unknown\n) {\n  for (var key in obj) {\n    if (fn.call(context, obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n};\n\nexport const findValue = function<V>(\n  obj: UtilObject<V>,\n  fn: (value: V, key: string | number, obj: UtilObject<V>) => unknown,\n  context?: unknown\n) {\n  var key = findKey(obj, fn, context);\n  return key && obj[key];\n};\n\nexport const getAnyKey = function<V>(obj: UtilObject<V>) {\n  for (var key in obj) {\n    return key;\n  }\n};\n\nexport const getValues = function<V>(obj: UtilObject<V>) {\n  var res: V[] = [];\n  var i = 0;\n  for (var key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n};\n\n/**\n * Tests whether every key/value pair in an object pass the test implemented\n * by the provided function\n *\n * @param {?Object.<K,V>} obj Object to test.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexport const every = function<V>(\n  obj: UtilObject<V>,\n  fn: (k: string, v?: V) => boolean\n): boolean {\n  for (let key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (!fn(key, obj[key])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argumentNumber The index of the argument\n * @param optional Whether or not the argument is optional\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(\n  fnName: string,\n  argumentNumber: number,\n  optional: boolean\n): string {\n  let argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  let error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  argumentNumber: number,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentNumber: number,\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentNumber: number,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function(str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function(str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.VERBOSE:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.INFO:\n      console.info(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.WARN:\n      console.warn(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.ERROR:\n      console.error(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    default:\n      throw new Error(\n        `Attempted to log a message with an invalid logType (value: ${logType})`\n      );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError('Invalid value assigned to `logLevel`');\n    }\n    this._logLevel = val;\n  }\n\n  /**\n   * The log handler for the Logger instance.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\n\ndeclare const window: any;\ndeclare const Windows: any;\n\nimport { assert } from '@firebase/util';\nimport { forEach } from '@firebase/util';\nimport { base64 } from '@firebase/util';\nimport { Sha1 } from '@firebase/util';\nimport { stringToByteArray } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { isNodeSdk } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} var_args\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...var_args: any[]): string {\n  let message = '';\n  for (let i = 0; i < var_args.length; i++) {\n    if (\n      Array.isArray(var_args[i]) ||\n      (var_args[i] &&\n        typeof var_args[i] === 'object' &&\n        typeof var_args[i].length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || (logger_ === true || logger_ === false),\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} var_args\n */\nexport const log = function(...var_args: string[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true)\n      enableLogging(true);\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, var_args);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...var_args: any[]) => void {\n  return function(...var_args: any[]) {\n    log(prefix, ...var_args);\n  };\n};\n\n/**\n * @param {...string} var_args\n */\nexport const error = function(...var_args: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...var_args);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} var_args\n */\nexport const fatal = function(...var_args: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...var_args)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} var_args\n */\nexport const warn = function(...var_args: any[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...var_args);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: any): boolean {\n  return (\n    typeof data === 'number' &&\n    (data != data || // NaN\n      data == Number.POSITIVE_INFINITY ||\n      data == Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    let wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n    } else if ((document as any).attachEvent) {\n      // IE.\n      (document as any).attachEvent('onreadystatechange', function() {\n        if (document.readyState === 'complete') wrappedFn();\n      });\n      // fallback to onload.\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: any }\n): any {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: any): string {\n  if (typeof obj !== 'object' || obj === null) return stringify(obj);\n\n  const keys = [];\n  for (let k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param {!(Object|Array)} obj The object or array to iterate over\n * @param {function(?, ?)} fn The function to apply\n */\nexport const each = function(\n  obj: Object | Array<any>,\n  fn: (v?: any, k?: any) => void\n) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; ++i) {\n      fn(i, obj[i]);\n    }\n  } else {\n    /**\n     * in the conversion of code we removed the goog.object.forEach\n     * function which did a value,key callback. We standardized on\n     * a single impl that does a key, value callback. So we invert\n     * to not have to touch the `each` code points\n     */\n    forEach(obj, (key: any, val: any) => fn(val, key));\n  }\n};\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: any) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  let bias = (1 << (ebits - 1)) - 1,\n    s,\n    e,\n    f,\n    ln,\n    i,\n    bits,\n    str;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function() {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...var_args: any[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(function() {\n      callback(...var_args);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: Object,\n  name: string,\n  fnGet: () => any\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | Object {\n  const timeout: number | Object = setTimeout(fn, time);\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: any | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): any {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: any } = {};\n\n  set(key: string, value: any | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): any {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: any;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function(\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length)\n      return this.pieces_[this.pieces_.length - 1];\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '')\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++)\n      pieces.push(this.pieces_[i]);\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++)\n      pieces.push(this.pieces_[i]);\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) return cmp;\n    }\n    if (leftKeys.length === rightKeys.length) return 0;\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length == 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { forEach } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = ''\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return this.host !== this.internalHost || this.isCustomHost();\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    forEach(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  let results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexport const parseRepoInfo = function(\n  dataURL: string\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseURL(dataURL),\n    namespace = parsedUrl.subdomain;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace == 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\n */\nexport const parseURL = function(\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    let queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    const parts = host.split('.');\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    }\n    // Support `ns` query param if subdomain not already set\n    if (subdomain === '' && 'ns' in queryParams) {\n      subdomain = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function() {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function(now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '@firebase/util';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' &&\n          contains(val as { [key: string]: unknown }, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport { forEach, contains, safeGet } from '@firebase/util';\nimport { isInvalidJSONNumber } from './util';\nimport { errorPrefix as errorPrefixFxn } from '@firebase/util';\nimport { stringLength } from '@firebase/util';\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function(key: any): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function(pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function(pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function(priority: any): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority && typeof priority === 'object' && contains(priority, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function(\n  errorPrefix: string,\n  data: any,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false,\n      hasActualChild = false;\n    forEach(data, function(key: string, value: any) {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function(\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  forEach(data, function(key: string, value: any) {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function(\n  fnName: string,\n  argumentNumber: number,\n  priority: any,\n  optional: boolean\n) {\n  if (optional && priority === undefined) return;\n  if (isInvalidJSONNumber(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n};\n\nexport const validateEventType = function(\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) return;\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function(\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) return;\n  if (!isValidKey(key))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n};\n\nexport const validatePathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) return;\n\n  if (!isValidPathString(pathString))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n};\n\nexport const validateRootPathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function(fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function(\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function(\n  fnName: string,\n  argumentNumber: number,\n  cred: any,\n  optional: boolean\n) {\n  if (optional && cred === undefined) return;\n  if (!(typeof cred === 'string'))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n};\n\nexport const validateBoolean = function(\n  fnName: string,\n  argumentNumber: number,\n  bool: any,\n  optional: boolean\n) {\n  if (optional && bool === undefined) return;\n  if (typeof bool !== 'boolean')\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n};\n\nexport const validateString = function(\n  fnName: string,\n  argumentNumber: number,\n  string: any,\n  optional: boolean\n) {\n  if (optional && string === undefined) return;\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  optional: boolean\n) {\n  if (optional && obj === undefined) return;\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  key: string,\n  optional: boolean,\n  opt_type?: string\n) {\n  const objectContainsKey =\n    obj && typeof obj === 'object' && contains(obj, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (opt_type) {\n    const val = safeGet(obj, key);\n    if (\n      (opt_type === 'number' && !(typeof val === 'number')) ||\n      (opt_type === 'string' && !(typeof val === 'string')) ||\n      (opt_type === 'boolean' && !(typeof val === 'boolean')) ||\n      (opt_type === 'function' && !(typeof val === 'function')) ||\n      (opt_type === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            opt_type +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            opt_type +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: String,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): any;\n\n  /**\n   * @param {boolean=} exportFormat True for export format (also wire protocol format).\n   * @return {*} Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: any, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | object,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: String, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): any {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): Object {\n    if (exportFormat && !this.getPriority().isEmpty())\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    else return this.getValue();\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): object | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: any) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: any) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: any, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { contains, clone, map, safeGet } from '@firebase/util';\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\n/**\n *\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\n * @param {Object.<string, Index>} indexSet\n * @constructor\n */\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   * @type {!IndexMap}\n   * @const\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  /**\n   *\n   * @param {!string} indexKey\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n\n    if (sortedMap === fallbackObject) {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    } else {\n      return sortedMap as SortedMap<NamedNode, Node>;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @param {!SortedMap.<string, !Node>} existingChildren\n   * @return {!IndexMap}\n   */\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = clone(this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = clone(this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   * @param {!NamedNode} namedNode\n   * @param {!SortedMap.<string, !Node>} existingChildren\n   * @return {!IndexMap}\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name != namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   * @param {!NamedNode} namedNode\n   * @param {!SortedMap.<string, !Node>} existingChildren\n   * @return {!IndexMap}\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(this.indexes_, function(\n      indexedChildren: SortedMap<NamedNode, Node>\n    ) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(\n            new NamedNode(namedNode.name, existingSnap)\n          );\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) return this;\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap, newPriority;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) return null;\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function(key: string, childNode: Node) {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      for (let key in obj) array[(key as any) as number] = obj[key];\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n\n      this.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        const childHash = childNode.hash();\n        if (childHash !== '') toHash += ':' + key + ':' + childHash;\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(function(wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function(key) {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: (LLRBNode<K, V> | LLRBEmptyNode<K, V>)[] = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_)\n      result = this.resultGenerator_(node.key, node.value);\n    else result = { key: node.key, value: node.value } as any;\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as any;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n = this as any;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    let blackDepth;\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) node = node.right;\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode } from '../util/SortedMap';\nimport { SortedMap } from '../util/SortedMap';\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function(base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function(chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      attachPennant(\n        new LLRBNode(key, (namedNode.node as any) as V, color, null, childTree)\n      );\n    };\n\n    const attachPennant = function(pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { forEach, contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: any | null,\n  priority: string | number | null = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | object;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj: { [k: string]: any } = json as object;\n    forEach(hinzeJsonObj, (key: string, child: any) => {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(hinzeJsonObj[key]);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    const jsonObj = json as { [key: string]: unknown };\n    forEach(jsonObj, (key: string, childData: any) => {\n      if (contains(jsonObj, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty())\n            node = node.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\nimport {\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): any;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName != MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName != MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => any) | Object | null,\n    context?: Object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: Object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => any) | null,\n    context: Object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: Object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | Object | null,\n    context?: Object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) ret.cancel.bind(ret.context)(err);\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): Object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | Object | null,\n    context?: Object | null\n  ): { cancel: ((a: Error) => void) | null; context: Object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: Object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): any {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): any {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): any {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) return false;\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) return false;\n    else return !this.node_.isEmpty();\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType:\n      | 'value'\n      | ' child_added'\n      | ' child_changed'\n      | ' child_moved'\n      | ' child_removed',\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event } from './Event';\nimport { contains, getCount, getAnyKey, every } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: Object | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function() {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_:\n      | ({ [k: string]: (d: DataSnapshot, s?: string | null) => void })\n      | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: Object\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ (change.childName));\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as any,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index as any),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function() {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherCount = getCount(other.callbacks_);\n        const thisCount = getCount(this.callbacks_);\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          //  If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey /** @type {!string} */ = getAnyKey(other.callbacks_);\n            const thisKey /** @type {!string} */ = getAnyKey(this.callbacks_);\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return every(\n              this.callbacks_,\n              (eventType, cb) => other.callbacks_[eventType] === cb\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEmpty, getCount, forEach, contains } from '@firebase/util';\n\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nexport class CountedSet<K extends string | number, V> {\n  set: { [k: string]: V } = {};\n\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n  add(item: K, val: V) {\n    this.set[item as any] = val !== null ? val : (true as any);\n  }\n\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n  contains(key: K) {\n    return contains(this.set, key as string);\n  }\n\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n  get(item: K): V | void {\n    return this.contains(item) ? this.set[item as any] : undefined;\n  }\n\n  /**\n   * @param {!K} item\n   */\n  remove(item: K) {\n    delete this.set[item as any];\n  }\n\n  /**\n   * Deletes everything in the set\n   */\n  clear() {\n    this.set = {};\n  }\n\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.set);\n  }\n\n  /**\n   * @return {number} The number of items in the set\n   */\n  count(): number {\n    return getCount(this.set);\n  }\n\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n  each(fn: (k: K | string, v: V) => void) {\n    forEach(this.set, (k: string, v: V) => fn(k, v));\n  }\n\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n  keys(): K[] {\n    const keys: K[] = [];\n    forEach(this.set, (k: string) => {\n      keys.push(k as K);\n    });\n    return keys;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { CountedSet } from './util/CountedSet';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n *\n * @constructor\n */\nexport class SparseSnapshotTree {\n  /**\n   * @private\n   * @type {Node}\n   */\n  private value_: Node | null = null;\n\n  /**\n   * @private\n   * @type {CountedSet}\n   */\n  private children_: CountedSet<string, SparseSnapshotTree> | null = null;\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param {!Path} path Path to look up snapshot for.\n   * @return {?Node} The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value_ != null) {\n      return this.value_.getChild(path);\n    } else if (!path.isEmpty() && this.children_ != null) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children_.contains(childKey)) {\n        const childTree = this.children_.get(childKey) as SparseSnapshotTree;\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param {!Path} path Path to look up snapshot for.\n   * @param {!Node} data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value_ = data;\n      this.children_ = null;\n    } else if (this.value_ !== null) {\n      this.value_ = this.value_.updateChild(path, data);\n    } else {\n      if (this.children_ == null) {\n        this.children_ = new CountedSet<string, SparseSnapshotTree>();\n      }\n\n      const childKey = path.getFront();\n      if (!this.children_.contains(childKey)) {\n        this.children_.add(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children_.get(childKey) as SparseSnapshotTree;\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param {!Path} path Path to look up snapshot for.\n   * @return {boolean} True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value_ = null;\n      this.children_ = null;\n      return true;\n    } else {\n      if (this.value_ !== null) {\n        if (this.value_.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value_;\n          this.value_ = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, function(key, tree) {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children_ !== null) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children_.contains(childKey)) {\n          const safeToRemove = (this.children_.get(\n            childKey\n          ) as SparseSnapshotTree).forget(path);\n          if (safeToRemove) {\n            this.children_.remove(childKey);\n          }\n        }\n\n        if (this.children_.isEmpty()) {\n          this.children_ = null;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param {!Path} prefixPath Path to look up node for.\n   * @param {!Function} func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => any) {\n    if (this.value_ !== null) {\n      func(prefixPath, this.value_);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param {!Function} func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    if (this.children_ !== null) {\n      this.children_.each((key, tree) => {\n        func(key, tree);\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(\n  values: {\n    [k: string]: any;\n  } | null\n): { [k: string]: any } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  value: { [k: string]: any } | string | number | boolean,\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: Object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function(path, node) {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: Object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | object\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare } from './util';\nimport { forEach } from '@firebase/util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    forEach(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(function(\n      childKey: string,\n      childTree: ImmutableTree<T>\n    ) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal(function(childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { isEmpty, forEach, findValue, safeGet } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   *\n   * @type {!Object.<!string, !View>}\n   * @private\n   */\n  private views_: { [k: string]: View } = {};\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.views_);\n  }\n\n  /**\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} optCompleteServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = safeGet(this.views_, queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      forEach(this.views_, function(key: string, view: View) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      });\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = safeGet(this.views_, queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ (eventCache),\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ (serverCache),\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views_[queryId] = view;\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      const self = this;\n      forEach(this.views_, function(viewQueryId: string, view: View) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          delete self.views_[viewQueryId];\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      });\n    } else {\n      // remove the callback from the specific view.\n      const view = safeGet(this.views_, queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          delete this.views_[queryId];\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed: removed, events: cancelEvents };\n  }\n\n  /**\n   * @return {!Array.<!View>}\n   */\n  getQueryViews(): View[] {\n    const values = Object.keys(this.views_).map(key => this.views_[key]);\n    return values.filter(function(view) {\n      return !view\n        .getQuery()\n        .getQueryParams()\n        .loadsAllData();\n    });\n  }\n\n  /**\n   *\n   * @param {!Path} path The path to the desired complete snapshot\n   * @return {?Node} A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    forEach(this.views_, (key: string, view: View) => {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    });\n    return serverCache;\n  }\n\n  /**\n   * @param {!Query} query\n   * @return {?View}\n   */\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return safeGet(this.views_, queryId);\n    }\n  }\n\n  /**\n   * @param {!Query} query\n   * @return {boolean}\n   */\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  /**\n   * @return {?View}\n   */\n  getCompleteView(): View | null {\n    const completeView = findValue(this.views_, (view: View) =>\n      view\n        .getQuery()\n        .getQueryParams()\n        .loadsAllData()\n    );\n    return completeView || null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /**@inheritDoc */ public source: OperationSource,\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() == newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getValues, safeGet } from '@firebase/util';\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\n/**\n * @constructor\n */\nexport class ChildChangeAccumulator {\n  private changeMap_: { [k: string]: Change } = {};\n\n  /**\n   * @param {!Change} change\n   */\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey /** @type {!string} */ = change.childName;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = safeGet(this.changeMap_, childKey) as Change;\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        delete this.changeMap_[childKey];\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childRemovedChange(\n          childKey,\n          oldChange.oldSnap\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap_[childKey] = Change.childAddedChange(\n          childKey,\n          change.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.oldSnap\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  }\n\n  /**\n   * @return {!Array.<!Change>}\n   */\n  getChanges(): Change[] {\n    return getValues(this.changeMap_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache\n        .getEventCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap\n            .getNode()\n            .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\n        !eventSnap\n          .getNode()\n          .getPriority()\n          .equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey == '.priority') {\n          assert(\n            changePath.getLength() == 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach(function(relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function(name, node) {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach(function(mergePath, value) {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (\n          viewCache\n            .getEventCache()\n            .getNode()\n            .hasChild(childKey)\n        ) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { forEach } from '@firebase/util';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n *\n * @constructor\n * @param {!ImmutableTree.<!Node>} writeTree\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n  /**\n   * @type {!CompoundWrite}\n   */\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  /**\n   * @param {!Path} path\n   * @param {!Node} node\n   * @return {!CompoundWrite}\n   */\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} updates\n   * @return {!CompoundWrite}\n   */\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    forEach(updates, function(childKey: string, node: Node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param {!Path} path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param {!Path} path The path to check for\n   * @return {boolean} Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param {!Path} path The path to get a complete write\n   * @return {?Node} The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return {!Array.<NamedNode>} A list of all complete children.\n   */\n  getCompleteChildren(): Array<NamedNode> {\n    const children: NamedNode[] = [];\n    let node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childNode\n        ) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function(childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {!CompoundWrite}\n   */\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return {boolean} Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param {!Node} node The node to apply this CompoundWrite to\n   * @return {!Node} The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @param {!ImmutableTree.<!Node>} writeTree\n   * @param {!Node} node\n   * @return {!Node}\n   * @private\n   */\n  private static applySubtreeWrite_ = function(\n    relativePath: Path,\n    writeTree: ImmutableTree<Node>,\n    node: Node\n  ): Node {\n    if (writeTree.value != null) {\n      // Since there a write is always a leaf, we're done here\n      return node.updateChild(relativePath, writeTree.value);\n    } else {\n      let priorityWrite = null;\n      writeTree.children.inorderTraversal(function(childKey, childTree) {\n        if (childKey === '.priority') {\n          // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n          // to apply priorities to empty nodes that are later filled\n          assert(\n            childTree.value !== null,\n            'Priority writes must always be leaf nodes'\n          );\n          priorityWrite = childTree.value;\n        } else {\n          node = CompoundWrite.applySubtreeWrite_(\n            relativePath.child(childKey),\n            childTree,\n            node\n          );\n        }\n      });\n      // If there was a priority write, we only apply it if the node is not empty\n      if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n        node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n      }\n      return node;\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { findKey, forEach, safeGet } from '@firebase/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(function(s) {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        forEach(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function(write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childSnap\n        ) {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function(\n        childName,\n        childNode\n      ) {\n        const node = merge\n          .childCompoundWrite(new Path(childName))\n          .apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      });\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * @param {!WriteRecord} writeRecord\n   * @param {!Path} path\n   * @return {boolean}\n   * @private\n   */\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      // findKey can return undefined, so use !! to coerce to boolean\n      return !!findKey(writeRecord.children, function(\n        childSnap: Node,\n        childName: string\n      ) {\n        return writeRecord.path.child(childName).contains(path);\n      });\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   * @private\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   *\n   * @param {!WriteRecord} write\n   * @return {boolean}\n   * @private\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   *\n   * @param {!Array.<!WriteRecord>} writes\n   * @param {!function(!WriteRecord):boolean} filter\n   * @param {!Path} treeRoot\n   * @return {!CompoundWrite}\n   * @private\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { forEach, safeGet } from '@firebase/util';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: any) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   * @type {!ImmutableTree.<!SyncPoint>}\n   * @private\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   * @type {!WriteTree}\n   * @private\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private tagToQueryMap_: { [k: string]: string } = {};\n  private queryToTagMap_: { [k: string]: number } = {};\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @param {number} writeId\n   * @param {boolean=} visible\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param {!number} writeId\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        forEach(write.children, function(pathString: string, node: Node) {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @param {!Path} path\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @param {!Path} path\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function(childName, childSyncPoint) {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !(queryKey in this.queryToTagMap_),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag;\n      // Coerce to string to avoid sparse arrays.\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(function(query) {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(path, function(\n        relativePath,\n        parentSyncPoint\n      ) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap_[\n              SyncTree.makeQueryKey_(queryToRemove)\n            ];\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   * @param {!Path} path The path to the data we want\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(path, function(\n      pathSoFar,\n      syncPoint\n    ) {\n      const relativePath = Path.relativePath(pathSoFar, path);\n      const serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   *\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\n   * @return {!Array.<!View>}\n   * @private\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          forEach(childMap, function(key: string, childViews: View[]) {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  /**\n   * @param {!Array.<!Query>} queries\n   * @private\n   */\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   * @param {!Query} query\n   * @return {!Query} The normalized query\n   * @private\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return /** @type {!Query} */ query.getRef();\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @param {!Query} query\n   * @param {!View} view\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n   * @private\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(function(\n        relativePath,\n        maybeChildSyncPoint,\n        childMap\n      ) {\n        if (\n          !relativePath.isEmpty() &&\n          maybeChildSyncPoint &&\n          maybeChildSyncPoint.hasCompleteView()\n        ) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n            );\n          }\n          forEach(childMap, function(key: string, childQueries: Query[]) {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      });\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  /**\n   *\n   * @param {!View} view\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\n   * @private\n   */\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: any): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   * @private\n   * @param {!Query} query\n   * @return {string}\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   * @private\n   * @param {!string} queryKey\n   * @return {{queryId: !string, path: !Path}}\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   * @param {!number} tag\n   * @return {?string}\n   * @private\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap_['_' + tag];\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   * @param {!Query} query\n   * @return {?number}\n   * @private\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return safeGet(this.queryToTagMap_, queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   * @type {number}\n   * @private\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   * @return {number}\n   * @private\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   *\n   * @param {!Path} queryPath\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   *\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport { log, warn } from './util/util';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  /**\n   * @param {!FirebaseApp} app_\n   */\n  constructor(private app_: FirebaseApp) {}\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(\n      null,\n      // .catch\n      function(error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    );\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy } from '@firebase/util';\nimport { contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) this.counters_[name] = 0;\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: any } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { clone, forEach } from '@firebase/util';\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta: typeof newStats = clone(newStats);\n    if (this.last_) {\n      forEach(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, forEach } from '@firebase/util';\nimport { setTimeoutNonBlocking } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    forEach(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: any[]): void;\n      context: any;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(function(et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\nimport { isMobileCordova } from '@firebase/util';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { CountedSet } from '../core/util/CountedSet';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) return;\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) return; // we closed the connection.\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command == FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1;\n            this.password = arg2;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN, data);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier)\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        !isNodeSdk() &&\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return (\n      BrowserPollConnection.forceAllow_ ||\n      (!BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp() &&\n        !isNodeSdk())\n    );\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: Object) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: any) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  /**\n   * @type {CountedSet.<number, number>}\n   */\n  outstandingRequests = new CountedSet<number, number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: { seg: number; ts: number; d: any }[] = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: any[]) => void;\n  onMessageCB: (...args: any[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: any[]) => void,\n    onMessageCB: (...args: any[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      (window as any)[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      (window as any)[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      (iframe as any).doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      (iframe as any).doc = iframe.contentWindow.document; // Internet Explorer\n    } else if ((iframe as any).document) {\n      (iframe as any).doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (isNodeSdk() && this.myID) {\n      const urlParams: { [k: string]: string } = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      const theURL = this.urlFn(urlParams);\n      (FirebaseIFrameScriptHolder as any).nodeRestRequest(theURL);\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: any) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial, 1);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.remove(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) return;\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\n\ndeclare const MozWebSocket: any;\n\nimport firebase from '@firebase/app';\nimport { assert } from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { CONSTANTS as ENV_CONSTANTS } from '@firebase/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { jsonEval, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: Object) => void;\n  mySock: any | null;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n\n  /**\n   * @param {string} connId identifier for this transport\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = ENV_CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${\n              firebase.SDK_VERSION\n            }/${process.platform}/${device}`\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') == 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = (m: object) => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = (e: any) => {\n      this.log_('WebSocket error.  Closing connection.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: Boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length == this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: any }) {\n    if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: Object) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable)\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      each(\n        TransportManager.ALL_TRANSPORTS,\n        (i: number, transport: TransportConstructor) => {\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: any[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: any[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param {!string} id - an id for this connection\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private onMessage_: (a: Object) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeout_ms = conn['healthyTimeout'] || 0;\n    if (healthyTimeout_ms > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n      }, Math.floor(healthyTimeout_ms)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: object) => {\n      if (this.state_ != RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: any }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: object) {\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer == 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: any }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onControl_(data);\n    } else if (layer == 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: any) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: any }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ == RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: any }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { forEach, contains, isEmpty, getCount, safeGet } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { isAdmin, isValidFormat } from '@firebase/util';\nimport { Connection } from '../realtime/Connection';\nimport { CONSTANTS } from '@firebase/util';\nimport { isMobileCordova, isReactNative, isNodeSdk } from '@firebase/util';\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: any): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: any;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: Object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  /** @private {Object} */\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private listens_: { [path: string]: { [queryId: string]: ListenSpec } } = {};\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: Object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  /** @private {number|null} */\n  private establishConnectionTimer_: number | null = null;\n\n  /** @private {boolean} */\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: any) => void } = {};\n  private requestNumber_ = 0;\n\n  /** @private {?{\n   *   sendRequest(Object),\n   *   close()\n   * }} */\n  private realtime_: {\n    sendRequest(a: Object): void;\n    close(): void;\n  } | null = null;\n\n  /** @private {string|null} */\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  /**\n   * @private\n   */\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   * @type {number}\n   * @private\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param onConnectStatus_\n   * @param onServerInfoUpdate_\n   * @param authTokenProvider_\n   * @param authOverride_\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: any) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: Object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  /**\n   * @param {!string} action\n   * @param {*} body\n   * @param {function(*)=} onResponse\n   * @protected\n   */\n  protected sendRequest(\n    action: string,\n    body: any,\n    onResponse?: (a: any) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    this.listens_[pathString] = this.listens_[pathString] || {};\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens_[pathString][queryId],\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens_[pathString][queryId] = listenSpec;\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  /**\n   * @param {!{onComplete(),\n   *           hashFn():!string,\n   *           query: !Query,\n   *           tag: ?number}} listenSpec\n   * @private\n   */\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: any }) => {\n      const payload: any = message[/*data*/ 'd'];\n      const status: string = message[/*status*/ 's'];\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens_[pathString] && this.listens_[pathString][queryId];\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {*} payload\n   * @param {!Query} query\n   * @private\n   */\n  private static warnOnListenWarnings_(payload: any, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' +\n          query\n            .getQueryParams()\n            .getIndex()\n            .toString() +\n          '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  /**\n   * @param {!string} credential\n   * @private\n   */\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: any } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, (res: { [k: string]: any }) => {\n        const status: string = res[/*status*/ 's'];\n        const data: string = res[/*data*/ 'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: Object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: any }) => {\n      if (onComplete) {\n        setTimeout(function() {\n          onComplete(response[/*status*/ 's'], response[/* data */ 'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: any } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) request[/*hash*/ 'h'] = hash;\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: any }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete)\n        onComplete(message[/*status*/ 's'], message[/* data */ 'd']);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: any }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {*} message\n   * @private\n   */\n  private onDataMessage_(message: { [k: string]: any }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: any }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t']\n      );\n    else if (action === 'm')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t']\n      );\n    else if (action === 'c')\n      this.onListenRevoked_(body[/*path*/ 'p'], body[/*query*/ 'q']);\n    else if (action === 'ac')\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'],\n        body[/* explanation */ 'd']\n      );\n    else if (action === 'sd') this.onSecurityDebugPacket_(body);\n    else\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n    }, Math.floor(timeout)) as any;\n  }\n\n  /**\n   * @param {boolean} visible\n   * @private\n   */\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function() {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function(msg: Object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(function(result) {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ function(reason) {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, function(error) {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (CONSTANTS.NODE_ADMIN) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  /**\n   * @param {string} reason\n   */\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  /**\n   * @param {string} reason\n   */\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) put.onComplete('disconnect');\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n  }\n\n  /**\n   * @param {!string} pathString\n   * @param {Array.<*>=} query\n   * @private\n   */\n  private onListenRevoked_(pathString: string, query?: any[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) listen.onComplete('permission_denied');\n  }\n\n  /**\n   * @param {!string} pathString\n   * @param {!string} queryId\n   * @return {{queries:Array.<Query>, onComplete:function(string)}}\n   * @private\n   */\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens_[normalizedPathString] !== undefined) {\n      listen = this.listens_[normalizedPathString][queryId];\n      delete this.listens_[normalizedPathString][queryId];\n      if (getCount(this.listens_[normalizedPathString]) === 0) {\n        delete this.listens_[normalizedPathString];\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: any }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    forEach(\n      this.listens_,\n      (pathString: string, queries: { [key: string]: ListenSpec }) => {\n        forEach(queries, (key: string, listenSpec: ListenSpec) => {\n          this.sendListen_(listenSpec);\n        });\n      }\n    );\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) this.sendPut_(i);\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   * @private\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats[\n      'sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')\n    ] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\nimport { jsonEval } from '@firebase/util';\nimport { safeGet } from '@firebase/util';\nimport { querystring } from '@firebase/util';\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: any }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: any[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: Object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error == 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: any } = {},\n    callback: ((a: number | null, b?: any) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forEach } from './obj';\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\n * object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport const querystring = function<V>(querystringParams: {\n  [key: string]: string;\n}): string {\n  const params: string[] = [];\n  forEach(querystringParams, (key: string, value) => {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  });\n  return params.length ? '&' + params.join('&') : '';\n};\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\n *\n * @param {string} querystring\n * @return {!Object}\n */\nexport const querystringDecode = function(querystring: string): object {\n  const obj: { [key: string]: unknown } = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\nimport { map, forEach, isEmpty } from '@firebase/util';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactions_init_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: any) => void)\n    | null = null;\n  private __database: Database;\n\n  // A list of data pieces and paths to be set when this client disconnects.\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  /**\n   * TODO: This should be @private but it's used by test_access.js and internal.js\n   * @type {?PersistentConnection}\n   */\n  persistentConnection_: PersistentConnection | null = null;\n\n  /**\n   * @param {!RepoInfo} repoInfo_\n   * @param {boolean} forceRestClient\n   * @param {!FirebaseApp} app\n   */\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp\n  ) {\n    /** @type {!AuthTokenProvider} */\n    const authTokenProvider = new AuthTokenProvider(app);\n\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactions_init_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return {string}  The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return {!string} The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   * @return {!Object}\n   */\n  generateServerValues(): Object {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   *\n   * @private\n   * @param {string} pathString\n   * @param {*} data\n   * @param {boolean} isMerge\n   * @param {?number} tag\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: any,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(data as { [k: string]: any }, (raw: any) =>\n          nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(data as { [k: string]: any }, (raw: any) =>\n        nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  /**\n   * TODO: This should be @private but it's used by test_access.js and internal.js\n   * @param {?function(!string, *):*} callback\n   * @private\n   */\n  interceptServerData_(callback: ((a: string, b: any) => any) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  /**\n   * @param {!boolean} connectStatus\n   * @private\n   */\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  /**\n   * @param {!Object} updates\n   * @private\n   */\n  private onServerInfoUpdate_(updates: Object) {\n    each(updates, (value: any, key: string) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  /**\n   *\n   * @param {!string} pathString\n   * @param {*} value\n   * @private\n   */\n  private updateInfo_(pathString: string, value: any) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  /**\n   * @return {!number}\n   * @private\n   */\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} newVal\n   * @param {number|string|null} newPriority\n   * @param {?function(?Error, *=)} onComplete\n   */\n  setWithPriority(\n    path: Path,\n    newVal: any,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {!Object} childrenToMerge\n   * @param {?function(?Error, *=)} onComplete\n   */\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    forEach(childrenToMerge, (changedKey: string, changedValue: any) => {\n      empty = false;\n      const newNodeUnresolved = nodeFromJSON(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(\n        newNodeUnresolved,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      forEach(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   * @private\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = resolveDeferredValueTree(\n      this.onDisconnect_,\n      serverValues\n    );\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} value\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectSet(\n    path: Path,\n    value: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} value\n   * @param {*} priority\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: any,\n    priority: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} childrenToMerge\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          forEach(childrenToMerge, (childName: string, childNode: any) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  /**\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  /**\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration\n   */\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') return;\n\n    let stats: { [k: string]: any };\n    if (showDelta) {\n      if (!this.statsListener_)\n        this.statsListener_ = new StatsListener(this.stats_);\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    forEach(stats, (stat: string, value: any) => {\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) stat += ' ';\n      console.log(stat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  /**\n   * @param {...*} var_args\n   * @private\n   */\n  private log_(...var_args: any[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...var_args);\n  }\n\n  /**\n   * @param {?function(?Error, *=)} callback\n   * @param {!string} status\n   * @param {?string=} errorReason\n   */\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(function() {\n        if (status == 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) message += ': ' + errorReason;\n\n          const error = new Error(message);\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          let next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          let inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() == this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '@firebase/util';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { Deferred } from '@firebase/util';\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  public then: (a?: any) => Promise<any>;\n  public catch: (a?: Error) => Promise<any>;\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) return null;\n    else return this.path.getBack();\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null)\n        validateRootPathString('Reference.child', 1, pathString, false);\n      else validatePathString('Reference.child', 1, pathString, false);\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref = this as any;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(newVal: any, onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: Object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: any,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: any) => any,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    if (applyLocally === undefined) applyLocally = true;\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function(\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: any, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { forEach, contains, safeGet } from '@firebase/util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next;\n    while ((next = path.getFront()) !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    forEach(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) action(this);\n\n    this.forEachChild(function(child) {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) action(this);\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(function(child) {\n      if (child.getValue() !== null) action(child);\n      else child.forEachImmediateDescendantWithValue(action);\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { contains, safeGet } from '@firebase/util';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ntype Transaction = {\n  path: Path;\n  update: (a: any) => any;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n};\n\n/**\n * Setup the transaction data structures\n * @private\n */\n(Repo.prototype as any).transactions_init_ = function() {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: any) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function(\n  path: Path,\n  transactionUpdate: (a: any) => any,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function() {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function() {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n(Repo.prototype as any).getLatestState_ = function(\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n(Repo.prototype as any).sendReadyTransactions_ = function(\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n(Repo.prototype as any).sendTransactionQueue_ = function(\n  path: Path,\n  queue: Array<Transaction>\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(function(txn) {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /**@type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            else queue[i].status = TransactionStatus.RUN;\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n(Repo.prototype as any).rerunTransactions_ = function(changedPath: Path): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n(Repo.prototype as any).rerunTransactionQueue_ = function(\n  queue: Array<Transaction>,\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(function(q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(function(q) {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function(unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n(Repo.prototype as any).getAncestorTransactionNode_ = function(\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  while (\n    (front = path.getFront()) !== null &&\n    transactionNode.getValue() === null\n  ) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n(Repo.prototype as any).buildTransactionQueue_ = function(\n  transactionNode: Tree<Transaction[]>\n): Array<Transaction> {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort(function(a, b) {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function(\n  node: Tree<Transaction[]>,\n  queue: Array<Transaction>\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n(Repo.prototype as any).abortTransactions_ = function(path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n(Repo.prototype as any).abortTransactionsOnNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database {\n    const dbUrl: string = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   **/\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function() {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function(): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function(\n  ref: Reference,\n  callback: (a: Object) => void\n) {\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function(ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function(ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function(ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function(\n  ref: Reference,\n  callback: ((a: string, b: any) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n(PersistentConnection.prototype as any).simpleListen = function(\n  pathString: string,\n  onComplete: (a: any) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n(PersistentConnection.prototype as any).echo = function(\n  data: any,\n  onEcho: (a: any) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(\n    pathString,\n    data,\n    opt_onComplete,\n    opt_hash\n  ) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * @param {!Query} firebaseRef\n * @return {!Object}\n */\nexport const listens = function(firebaseRef: Query) {\n  return (firebaseRef.repo.persistentConnection_ as any).listens_;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerService(\n    'database',\n    (app, unused, url) => RepoManager.getInstance().databaseFromApp(app, url),\n    // firebase.database namespace properties\n    {\n      Reference,\n      Query,\n      Database,\n      DataSnapshot,\n      enableLogging,\n      INTERNAL,\n      ServerValue,\n      TEST_ACCESS\n    },\n    null,\n    true\n  );\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","done","value","pop","length","push","e","step","CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","Error","stringToByteArray","str","out","i","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Decode","console","error","deepCopy","deepExtend","target","source","Date","dateValue","getTime","undefined","prop","promise","Promise","resolve","reject","_this","Deferred","callback","catch","isMobileCordova","window","test","navigator","isNodeSdk","code","_super","FirebaseError","captureStackTrace","ErrorFactory","tslib_1.__extends","service","serviceName","errors","_i","data","customData","fullCode","template","replace","PATTERN","key","toString","fullMessage","_b","keys","_a","slice","warn","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","contains","obj","safeGet","forEach","fn","clone","objTo","isEmpty","getCount","rv","map","context","res","findKey","getAnyKey","blockSize","pad_","reset","Sha1","chain_","inbuf_","total_","buf","offset","W","W_","k","a","lengthMinusBlock","buf_","inbuf","compress_","digest","totalBits","update","j","validateArgCount","fnName","minCount","maxCount","argCount","argError","errorPrefix","argumentNumber","optional","argName","validateCallback","validateContextObject","LogLevel","stringLength","id","defaultLogLevel","INFO","defaultLogHandler","instance","logType","args","logLevel","now","toISOString","DEBUG","VERBOSE","log","name","info","WARN","ERROR","Logger","_logLevel","val","_logHandler","domStorage_","DOMStorageWrapper","removeItem","prefixedName_","setItem","storedVal","getItem","prefix_","MemoryStorage","cache_","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","sha1","utf8Bytes","high","sha1Bytes","buildLogMessage_","var_args","apply","logger","firstLog_","enableLogging","logger_","persistent","bind","set","remove","get","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","substring","each","doubleToIEEE754String","s","ln","bits","Infinity","Math","abs","pow","min","floor","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","Path","pathString","encodeURIComponent","begin","pieces","childPathObj","childPieces","outerPath","innerPath","outer","getFront","inner","relativePath","popFront","left","right","leftKeys","rightKeys","cmp","other","getLength","path","errorPrefix_","parts_","byteLength_","max","checkValid_","ValidationPath","child","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","FORGE_DOMAIN","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","persistenceKey","domain","indexOf","internalHost","RepoInfo","isCustomHost","newHost","isCacheableHost","type","params","connURL","needsQueryParam","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","location","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryParams","queryString","results","segment","kv","decodeQuery","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","errorPrefixFxn","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","getBack","comparePaths","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","repo_","OnDisconnect","onComplete","arguments","deferred","onDisconnectCancel","wrapCallback","onDisconnectSet","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","TransactionResult","toJSON","nextPushId","duplicateTime","timeStampChars","random","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","index","action","exportFormat",".value","getValue",".priority","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","SortedMapIterator","result","color","LLRBNode","RED","SortedMap","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","LOG_2","num","current_","mask","bits_","Base12Num","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","indexDefinition","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","hash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","json","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","indexPath_","PathIndex","snap","aChild","extractChild","bChild","node_","ref_","index_","DataSnapshot","exportVal","childPathString","childPath","childRef","getKey","numChildren","getRef","eventRegistration","prevName","DataEvent","ref","getParent","getEventRunner","getPath","CancelEvent","callback_","cancelCallback_","context_","ValueEventRegistration","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","getEventType","cancelCB_1","cb_1","callbacks_","ChildEventRegistration","eventToCheck","cancelCB_2","cb_2","otherCount","every","cb","otherKey","thisKey","repo","queryParams_","orderByCalled_","Query","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","hasLimit","hasAnchoredLimit","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","cancel","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","onceCallback","off","on","err","limit","limitToFirst","limitToLast","validateNoPreviousOrderByCall_","parsedPath","newParams","orderBy","validateQueryEndpoints_","startAt","validateLimit_","endAt","toUrlEncodedString","getQueryObject","queryObject","sameRepo","samePath","sameQueryIdentifier","queryIdentifier","cancelOrContext","CountedSet","item","SparseSnapshotTree","childKey","find","add","remember","self_1","tree","forget","prefixPath","func","forEachTree","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","fromUser","fromServer","queryId","tagged","OperationSource","affectedTree","revert","ACK_USER_WRITE","User","AckUserWrite","children","subtree","Empty","ImmutableTree","childSnap","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","CacheNode","isFullyInitialized","isCompleteForChild","hasChild","eventCache_","serverCache_","ViewCache","eventSnap","complete","filtered","serverSnap","getNode","oldSnap","Change","VALUE","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","childRemovedChange","childAddedChange","childChangedChange","withIndex","newSnap","newPriority","ChildChangeAccumulator","oldChange","changeMap_","oldType","getValues","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","writes_","viewCache_","optCompleteServerCache_","WriteTreeCompleteChildSource","getEventCache","serverNode","getServerCache","calcCompleteChild","completeServerData","getCompleteServerSnap","nodes","calcIndexedSlice","viewCache","changes","filter_","ViewProcessor","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","isFiltered","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","getChanges","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","getCompleteEventSnap","valueChange","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","updateFullNode","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","updateEventSnap","filtersNodes","changedSnap","newServerCache","oldServerSnap","serverFilter","getIndexedFilter","newServerNode","isCompleteForPath","updateServerSnap","generateEventCacheAfterServerEvent_","getCompleteChild","parent","newEventSnap","changedChildren","curViewCache","foreach","writePath","cacheHasChild_","viewMergeTree","serverChild","applyMerge_","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","EventGenerator","eventCache","eventRegistrations","events","moves","indexedValueChanged","childMovedChange","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","getPredecessorChildName","aWrapped","bWrapped","initialViewCache","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","View","cache","loadsAllData","eventRegistrations_","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","existing","matches","hasAnyCallback","concat","applyOperation","assertIndexed","generateEventsForChanges_","initialChanges","generateEventsForChanges","SyncPoint","views_","optCompleteServerCache","view","events_1","serverCacheComplete","eventCacheComplete","addEventRegistration","getInitialEvents","removed","hadCompleteView","hasCompleteView","viewQueryId","removeEventRegistration","getQuery","getCompleteServerCache","getCompleteView","viewForQuery","writeTree_","CompoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","updates","newWrite","addWrite","getCompleteNode","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","WriteTreeRef","writeId","visible","lastWriteId_","allWrites_","visibleWrites_","addWrites","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","removeWrite","treePath","writeIdsToExclude","includeHiddenWrites","childCompoundWrite","hasCompleteWrite","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","getCompleteChildren","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","SyncTree","newData","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","addMerge","changeTree","fromObject","getWrite","affectedTree_1","Server","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","forServerTaggedQuery","applyTaggedOperation_","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","syncPoint","foreachChild","childSyncPoint","viewAlreadyExists","viewExistsForQuery","makeQueryKey_","queryToTagMap_","getNextQueryTag_","tagToQueryMap_","childWrites","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","fold","maybeChildSyncPoint","childMap","views_1","getQueryViews","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","applyTaggedListenComplete","applyListenComplete","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","SnapshotHolder","rootNode_","newSnapshotNode","app_","AuthTokenProvider","forceRefresh","then","errorMessage","options","StatsCollection","amount","counters_","StatsManager","hashString","collections_","creatorFunction","reporters_","collection_","StatsListener","newStats","delta","last_","stat","collection","server_","statsListener_","reportStats_","StatsReporter","statsToReport_","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventDataList","currList","eventPath","eventLists_","EventList","queueEvents","raiseQueuedEventsMatchingPredicate_","changedPath","recursionDepth_","sentAll","eventList","raise","events_","eventFn","allowedEvents_","EventEmitter","listeners_","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","document","addEventListener","visible_","trigger","VisibilityMonitor","online_","OnlineMonitor","onMessage_","PacketReceiver","responseNum","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","connId","transportSessionId","lastSessionId","log_","stats_","getCollection","urlFn","connectionURL","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called_1","wrappedFn_1","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","Windows","UI","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","myIFrame","createIFrame_","script","iframeContents","doc","open","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","pendingSegs","currentSerial","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","send","initTransports_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports_1","ALL_TRANSPORTS","transport","repoInfo_","onReady_","onKill_","transportManager_","start_","Connection","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","markConnectionHealthy","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","updateHost","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","scheduleConnect_","getInstance","onVisible_","onOnline_","onResponse","curReqNum","requestNumber_","connected_","realtime_","sendRequest","requestCBHash_","currentHashFn","listens_","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","authToken_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","maxReconnectDelay_","token_1","authMethod","requestData","cred","invalidAuthTokenCount_","onAuthRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","request","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","onRealtimeDisconnect_","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","forceTokenRefresh_","getToken","accessToken","interrupt","interruptReasons_","serverTimeOffset","put","q","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","firebase","currentlyOnline","ReadonlyRestClient","listenId","getListenId_","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","arrayVal","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","forceRestClient","app","authTokenProvider","search","authOverride","persistentConnection_","addTokenChangeListener","refreshAuthToken","statsReporter_","getOrCreateReporter","transactions_init_","infoData_","infoSyncTree_","infoEvents","applyServerOverwrite","updateInfo_","serverSyncTree_","eventQueue_","raiseEventsForChangedPath","unlisten","Repo","values","serverTime","isMerge","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","applyTaggedQueryMerge","taggedSnap","applyTaggedQueryOverwrite","applyServerMerge","rerunTransactions_","connectStatus","runOnDisconnectEvents_","updateSnapshot","nextWriteId_","newVal","generateServerValues","newNodeUnresolved","getNextWriteId_","applyUserOverwrite","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","applyUserMerge","resolvedTree","resolvedOnDisconnectTree","onDisconnectPut","onDisconnectMerge","raiseEventsAtPath","resume","showDelta","longestName","reduce","previousValue","currentValue","metric","includeStat","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","makePost","endName","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","LimitedFilter","fullLimitUpdateChild_","hasNext","getReverseIterator","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","getChildAfterChild","compareNext","QueryParams","startSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","newLimit","copy_","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","database","setWithPriority","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","thennablePushRef","pushRef","databaseProp","getRoot","TransactionStatus","name_","parent_","TreeNode","Tree","pathObj","updateParents_","childCount","hasChildren","includeSelf","childrenFirst","forEachDescendant","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","transaction","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","subTree","nodeQueue","setValue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","forEachAncestor","abortTransactionsOnNode_","lastSent","_staticInstance","DATABASE_URL_OPTION","RepoManager","appName","repos_","dbUrl","createRepo","appRepos","useRestClient_","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","TIMESTAMP",".sv","generator","deleteRepo","P","_arguments","fulfilled","rejected","forceDisallow","forceAllow","statsIncrementCounter","interceptServerData_","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","opt_onComplete","opt_hash","firebaseRef","ServerValue","registerService","unused","databaseFromApp","TEST_ACCESS"],"mappings":"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"}